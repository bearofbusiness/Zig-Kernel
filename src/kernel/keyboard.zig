const fields = @import("std").meta.fields;

extern fn getCharRaw() u8;

pub fn getAsciiChar() ?u8 {
    return getAsciiCharFromCode(getCharRaw());
}

fn getAsciiCharFromCode(key_code: u8) ?u8 {
    return switch (key_code) {
        0x1E => 'A',
        0x30 => 'B',
        0x2E => 'C',
        0x20 => 'D',
        0x12 => 'E',
        0x21 => 'F',
        0x22 => 'G',
        0x23 => 'H',
        0x17 => 'I',
        0x24 => 'J',
        0x25 => 'K',
        0x26 => 'L',
        0x32 => 'M',
        0x31 => 'N',
        0x18 => 'O',
        0x19 => 'P',
        0x10 => 'Q',
        0x13 => 'R',
        0x1F => 'S',
        0x14 => 'T',
        0x16 => 'U',
        0x2F => 'V',
        0x11 => 'W',
        0x2D => 'X',
        0x15 => 'Y',
        0x2C => 'Z',
        0x02 => '1',
        0x03 => '2',
        0x04 => '3',
        0x05 => '4',
        0x06 => '5',
        0x07 => '6',
        0x08 => '7',
        0x09 => '8',
        0x0A => '9',
        0x0B => '0',
        0x0C => '-',
        0x0D => '=',
        0x1A => '[',
        0x1B => ']',
        0x27 => ';',
        0x2B => '\\',
        0x33 => ',',
        0x34 => '.',
        0x35 => '/',
        0x39 => ' ',
        else => null,
    };
}

const KeyLastKey = struct { key: Key, last_key: Key };

pub fn getKey() KeyLastKey {
    return switch (@as(KeyCodeRaw, @enumFromInt(getCharRaw()))) {
        // ----- Base set -----
        .EscDown => .{ .key = .EscDown, .last_key = .EscDown },
        .EscUp => .{ .key = .EscUp, .last_key = .EscUp },
        .Key1Down => .{ .key = .Key1Down, .last_key = .Key1Down },
        .Key1Up => .{ .key = .Key1Up, .last_key = .Key1Up },
        .Key2Down => .{ .key = .Key2Down, .last_key = .Key2Down },
        .Key2Up => .{ .key = .Key2Up, .last_key = .Key2Up },
        .Key3Down => .{ .key = .Key3Down, .last_key = .Key3Down },
        .Key3Up => .{ .key = .Key3Up, .last_key = .Key3Up },
        .Key4Down => .{ .key = .Key4Down, .last_key = .Key4Down },
        .Key4Up => .{ .key = .Key4Up, .last_key = .Key4Up },
        .Key5Down => .{ .key = .Key5Down, .last_key = .Key5Down },
        .Key5Up => .{ .key = .Key5Up, .last_key = .Key5Up },
        .Key6Down => .{ .key = .Key6Down, .last_key = .Key6Down },
        .Key6Up => .{ .key = .Key6Up, .last_key = .Key6Up },
        .Key7Down => .{ .key = .Key7Down, .last_key = .Key7Down },
        .Key7Up => .{ .key = .Key7Up, .last_key = .Key7Up },
        .Key8Down => .{ .key = .Key8Down, .last_key = .Key8Down },
        .Key8Up => .{ .key = .Key8Up, .last_key = .Key8Up },
        .Key9Down => .{ .key = .Key9Down, .last_key = .Key9Down },
        .Key9Up => .{ .key = .Key9Up, .last_key = .Key9Up },
        .Key0Down => .{ .key = .Key0Down, .last_key = .Key0Down },
        .Key0Up => .{ .key = .Key0Up, .last_key = .Key0Up },
        .MinusDown => .{ .key = .MinusDown, .last_key = .MinusDown },
        .MinusUp => .{ .key = .MinusUp, .last_key = .MinusUp },
        .EqualDown => .{ .key = .EqualDown, .last_key = .EqualDown },
        .EqualUp => .{ .key = .EqualUp, .last_key = .EqualUp },
        .BackspaceDown => .{ .key = .BackspaceDown, .last_key = .BackspaceDown },
        .BackspaceUp => .{ .key = .BackspaceUp, .last_key = .BackspaceUp },
        .TabDown => .{ .key = .TabDown, .last_key = .TabDown },
        .TabUp => .{ .key = .TabUp, .last_key = .TabUp },
        .QDown => .{ .key = .QDown, .last_key = .QDown },
        .QUp => .{ .key = .QUp, .last_key = .QUp },
        .WDown => .{ .key = .WDown, .last_key = .WDown },
        .WUp => .{ .key = .WUp, .last_key = .WUp },
        .EDown => .{ .key = .EDown, .last_key = .EDown },
        .EUp => .{ .key = .EUp, .last_key = .EUp },
        .RDown => .{ .key = .RDown, .last_key = .RDown },
        .RUp => .{ .key = .RUp, .last_key = .RUp },
        .TDown => .{ .key = .TDown, .last_key = .TDown },
        .TUp => .{ .key = .TUp, .last_key = .TUp },
        .YDown => .{ .key = .YDown, .last_key = .YDown },
        .YUp => .{ .key = .YUp, .last_key = .YUp },
        .UDown => .{ .key = .UDown, .last_key = .UDown },
        .UUp => .{ .key = .UUp, .last_key = .UUp },
        .IDown => .{ .key = .IDown, .last_key = .IDown },
        .IUp => .{ .key = .IUp, .last_key = .IUp },
        .ODown => .{ .key = .ODown, .last_key = .ODown },
        .OUp => .{ .key = .OUp, .last_key = .OUp },
        .PDown => .{ .key = .PDown, .last_key = .PDown },
        .PUp => .{ .key = .PUp, .last_key = .PUp },
        .OpenBracketDown => .{ .key = .OpenBracketDown, .last_key = .OpenBracketDown },
        .OpenBracketUp => .{ .key = .OpenBracketUp, .last_key = .OpenBracketUp },
        .CloseBracketDown => .{ .key = .CloseBracketDown, .last_key = .CloseBracketDown },
        .CloseBracketUp => .{ .key = .CloseBracketUp, .last_key = .CloseBracketUp },
        .EnterDown => .{ .key = .EnterDown, .last_key = .EnterDown },
        .EnterUp => .{ .key = .EnterUp, .last_key = .EnterUp },
        .LeftCtrlDown => .{ .key = .LeftCtrlDown, .last_key = .LeftCtrlDown },
        .LeftCtrlUp => .{ .key = .LeftCtrlUp, .last_key = .LeftCtrlUp },
        .ADown => .{ .key = .ADown, .last_key = .ADown },
        .AUp => .{ .key = .AUp, .last_key = .AUp },
        .SDown => .{ .key = .SDown, .last_key = .SDown },
        .SUp => .{ .key = .SUp, .last_key = .SUp },
        .DDown => .{ .key = .DDown, .last_key = .DDown },
        .DUp => .{ .key = .DUp, .last_key = .DUp },
        .FDown => .{ .key = .FDown, .last_key = .FDown },
        .FUp => .{ .key = .FUp, .last_key = .FUp },
        .GDown => .{ .key = .GDown, .last_key = .GDown },
        .GUp => .{ .key = .GUp, .last_key = .GUp },
        .HDown => .{ .key = .HDown, .last_key = .HDown },
        .HUp => .{ .key = .HUp, .last_key = .HUp },
        .JDown => .{ .key = .JDown, .last_key = .JDown },
        .JUp => .{ .key = .JUp, .last_key = .JUp },
        .KDown => .{ .key = .KDown, .last_key = .KDown },
        .KUp => .{ .key = .KUp, .last_key = .KUp },
        .LDown => .{ .key = .LDown, .last_key = .LDown },
        .LUp => .{ .key = .LUp, .last_key = .LUp },
        .SemicolonDown => .{ .key = .SemicolonDown, .last_key = .SemicolonDown },
        .SemicolonUp => .{ .key = .SemicolonUp, .last_key = .SemicolonUp },
        .ApostropheDown => .{ .key = .ApostropheDown, .last_key = .ApostropheDown },
        .ApostropheUp => .{ .key = .ApostropheUp, .last_key = .ApostropheUp },
        .BacktickDown => .{ .key = .BacktickDown, .last_key = .BacktickDown },
        .BacktickUp => .{ .key = .BacktickUp, .last_key = .BacktickUp },
        .LeftShiftDown => .{ .key = .LeftShiftDown, .last_key = .LeftShiftDown },
        .LeftShiftUp => .{ .key = .LeftShiftUp, .last_key = .LeftShiftUp },
        .ZDown => .{ .key = .ZDown, .last_key = .ZDown },
        .ZUp => .{ .key = .ZUp, .last_key = .ZUp },
        .XDown => .{ .key = .XDown, .last_key = .XDown },
        .XUp => .{ .key = .XUp, .last_key = .XUp },
        .CDown => .{ .key = .CDown, .last_key = .CDown },
        .CUp => .{ .key = .CUp, .last_key = .CUp },
        .VDown => .{ .key = .VDown, .last_key = .VDown },
        .VUp => .{ .key = .VUp, .last_key = .VUp },
        .BDown => .{ .key = .BDown, .last_key = .BDown },
        .BUp => .{ .key = .BUp, .last_key = .BUp },
        .NDown => .{ .key = .NDown, .last_key = .NDown },
        .NUp => .{ .key = .NUp, .last_key = .NUp },
        .MDown => .{ .key = .MDown, .last_key = .MDown },
        .MUp => .{ .key = .MUp, .last_key = .MUp },
        .CommaDown => .{ .key = .CommaDown, .last_key = .CommaDown },
        .CommaUp => .{ .key = .CommaUp, .last_key = .CommaUp },
        .DotDown => .{ .key = .DotDown, .last_key = .DotDown },
        .DotUp => .{ .key = .DotUp, .last_key = .DotUp },
        .SlashDown => .{ .key = .SlashDown, .last_key = .SlashDown },
        .SlashUp => .{ .key = .SlashUp, .last_key = .SlashUp },
        .RightShiftDown => .{ .key = .RightShiftDown, .last_key = .RightShiftDown },
        .RightShiftUp => .{ .key = .RightShiftUp, .last_key = .RightShiftUp },
        .KeypadMulDown => .{ .key = .KeypadMulDown, .last_key = .KeypadMulDown },
        .KeypadMulUp => .{ .key = .KeypadMulUp, .last_key = .KeypadMulUp },
        .LeftAltDown => .{ .key = .LeftAltDown, .last_key = .LeftAltDown },
        .LeftAltUp => .{ .key = .LeftAltUp, .last_key = .LeftAltUp },
        .SpaceDown => .{ .key = .SpaceDown, .last_key = .SpaceDown },
        .SpaceUp => .{ .key = .SpaceUp, .last_key = .SpaceUp },
        .CapsLockDown => .{ .key = .CapsLockDown, .last_key = .CapsLockDown },
        .CapsLockUp => .{ .key = .CapsLockUp, .last_key = .CapsLockUp },
        .F1Down => .{ .key = .F1Down, .last_key = .F1Down },
        .F1Up => .{ .key = .F1Up, .last_key = .F1Up },
        .F2Down => .{ .key = .F2Down, .last_key = .F2Down },
        .F2Up => .{ .key = .F2Up, .last_key = .F2Up },
        .F3Down => .{ .key = .F3Down, .last_key = .F3Down },
        .F3Up => .{ .key = .F3Up, .last_key = .F3Up },
        .F4Down => .{ .key = .F4Down, .last_key = .F4Down },
        .F4Up => .{ .key = .F4Up, .last_key = .F4Up },
        .F5Down => .{ .key = .F5Down, .last_key = .F5Down },
        .F5Up => .{ .key = .F5Up, .last_key = .F5Up },
        .F6Down => .{ .key = .F6Down, .last_key = .F6Down },
        .F6Up => .{ .key = .F6Up, .last_key = .F6Up },
        .F7Down => .{ .key = .F7Down, .last_key = .F7Down },
        .F7Up => .{ .key = .F7Up, .last_key = .F7Up },
        .F8Down => .{ .key = .F8Down, .last_key = .F8Down },
        .F8Up => .{ .key = .F8Up, .last_key = .F8Up },
        .F9Down => .{ .key = .F9Down, .last_key = .F9Down },
        .F9Up => .{ .key = .F9Up, .last_key = .F9Up },
        .F10Down => .{ .key = .F10Down, .last_key = .F10Down },
        .F10Up => .{ .key = .F10Up, .last_key = .F10Up },
        .NumLockDown => .{ .key = .NumLockDown, .last_key = .NumLockDown },
        .NumLockUp => .{ .key = .NumLockUp, .last_key = .NumLockUp },
        .ScrollLockDown => .{ .key = .ScrollLockDown, .last_key = .ScrollLockDown },
        .ScrollLockUp => .{ .key = .ScrollLockUp, .last_key = .ScrollLockUp },
        .KeypadMinusDown => .{ .key = .KeypadMinusDown, .last_key = .KeypadMinusDown },
        .KeypadMinusUp => .{ .key = .KeypadMinusUp, .last_key = .KeypadMinusUp },
        .Keypad7Down => .{ .key = .Keypad7Down, .last_key = .Keypad7Down },
        .Keypad7Up => .{ .key = .Keypad7Up, .last_key = .Keypad7Up },
        .Keypad8Down => .{ .key = .Keypad8Down, .last_key = .Keypad8Down },
        .Keypad8Up => .{ .key = .Keypad8Up, .last_key = .Keypad8Up },
        .Keypad9Down => .{ .key = .Keypad9Down, .last_key = .Keypad9Down },
        .Keypad9Up => .{ .key = .Keypad9Up, .last_key = .Keypad9Up },
        .Keypad4Down => .{ .key = .Keypad4Down, .last_key = .Keypad4Down },
        .Keypad4Up => .{ .key = .Keypad4Up, .last_key = .Keypad4Up },
        .Keypad5Down => .{ .key = .Keypad5Down, .last_key = .Keypad5Down },
        .Keypad5Up => .{ .key = .Keypad5Up, .last_key = .Keypad5Up },
        .Keypad6Down => .{ .key = .Keypad6Down, .last_key = .Keypad6Down },
        .Keypad6Up => .{ .key = .Keypad6Up, .last_key = .Keypad6Up },
        .KeypadPlusDown => .{ .key = .KeypadPlusDown, .last_key = .KeypadPlusDown },
        .KeypadPlusUp => .{ .key = .KeypadPlusUp, .last_key = .KeypadPlusUp },
        .Keypad1Down => .{ .key = .Keypad1Down, .last_key = .Keypad1Down },
        .Keypad1Up => .{ .key = .Keypad1Up, .last_key = .Keypad1Up },
        .Keypad2Down => .{ .key = .Keypad2Down, .last_key = .Keypad2Down },
        .Keypad2Up => .{ .key = .Keypad2Up, .last_key = .Keypad2Up },
        .Keypad3Down => .{ .key = .Keypad3Down, .last_key = .Keypad3Down },
        .Keypad3Up => .{ .key = .Keypad3Up, .last_key = .Keypad3Up },
        .Keypad0Down => .{ .key = .Keypad0Down, .last_key = .Keypad0Down },
        .Keypad0Up => .{ .key = .Keypad0Up, .last_key = .Keypad0Up },
        .KeypadDotDown => .{ .key = .KeypadDotDown, .last_key = .KeypadDotDown },
        .KeypadDotUp => .{ .key = .KeypadDotUp, .last_key = .KeypadDotUp },
        .F11Down => .{ .key = .F11Down, .last_key = .F11Down },
        .F11Up => .{ .key = .F11Up, .last_key = .F11Up },
        .F12Down => .{ .key = .F12Down, .last_key = .F12Down },
        .F12Up => .{ .key = .F12Up, .last_key = .F12Up },

        .ExtendedKey => blk: {
            return switch (@as(KeyCodeRaw, @enumFromInt(getCharRaw()))) {
                .EnterDown => .{ .key = .NumpadEnterDown, .last_key = .EnterDown },
                .EnterUp => .{ .key = .NumpadEnterUp, .last_key = .EnterUp },
                .LeftCtrlDown => .{ .key = .RightCtrlDown, .last_key = .LeftCtrlDown },
                .LeftCtrlUp => .{ .key = .RightCtrlUp, .last_key = .LeftCtrlUp },
                .LeftShiftDown => {
                    const n2: KeyCodeRaw = @enumFromInt(getCharRaw());
                    if (n2 == .ExtendedKey and
                        @as(KeyCodeRaw, @enumFromInt(getCharRaw())) == .KeypadMulDown)
                        break :blk .{ .key = .PrintScreenDown, .last_key = .KeypadMulDown };
                    break :blk .{ .key = .Unknown, .last_key = .Unknown };
                },
                .SlashDown => .{ .key = .KeypadDivideDown, .last_key = .SlashDown },
                .SlashUp => .{ .key = .KeypadDivideUp, .last_key = .SlashUp },
                .KeypadMulUp => {
                    const n2: KeyCodeRaw = @enumFromInt(getCharRaw());
                    if (n2 == .ExtendedKey and
                        @as(KeyCodeRaw, @enumFromInt(getCharRaw())) == .LeftShiftUp)
                        break :blk .{ .key = .PrintScreenUp, .last_key = .LeftShiftUp };
                    break :blk .{ .key = .Unknown, .last_key = .Unknown };
                },
                .LeftAltDown => .{ .key = .RightAltDown, .last_key = .LeftAltDown },
                .LeftAltUp => .{ .key = .RightAltUp, .last_key = .LeftAltUp },
                .Keypad7Down => .{ .key = .HomeDown, .last_key = .Keypad7Down },
                .Keypad7Up => .{ .key = .HomeUp, .last_key = .Keypad7Up },
                .Keypad8Down => .{ .key = .UpArrowDown, .last_key = .Keypad8Down },
                .Keypad8Up => .{ .key = .UpArrowUp, .last_key = .Keypad8Up },
                .Keypad9Down => .{ .key = .PageUpDown, .last_key = .Keypad9Down },
                .Keypad9Up => .{ .key = .PageUpUp, .last_key = .Keypad9Up },
                .Keypad4Down => .{ .key = .LeftArrowDown, .last_key = .Keypad4Down },
                .Keypad4Up => .{ .key = .LeftArrowUp, .last_key = .Keypad4Up },
                .Keypad6Down => .{ .key = .RightArrowDown, .last_key = .Keypad6Down },
                .Keypad6Up => .{ .key = .RightArrowUp, .last_key = .Keypad6Up },
                .Keypad1Down => .{ .key = .EndDown, .last_key = .Keypad1Down },
                .Keypad1Up => .{ .key = .EndUp, .last_key = .Keypad1Up },
                .Keypad2Down => .{ .key = .DownArrowDown, .last_key = .Keypad2Down },
                .Keypad2Up => .{ .key = .DownArrowUp, .last_key = .Keypad2Up },
                .Keypad3Down => .{ .key = .PageDownDown, .last_key = .Keypad3Down },
                .Keypad3Up => .{ .key = .PageDownUp, .last_key = .Keypad3Up },
                .Keypad0Down => .{ .key = .InsertDown, .last_key = .Keypad0Down },
                .Keypad0Up => .{ .key = .InsertUp, .last_key = .Keypad0Up },
                .KeypadDotDown => .{ .key = .DeleteDown, .last_key = .KeypadDotDown },
                .KeypadDotUp => .{ .key = .DeleteUp, .last_key = .KeypadDotUp },
                .LeftGuiDown => .{ .key = .LeftGuiDown, .last_key = .LeftGuiDown },
                .LeftGuiUp => .{ .key = .LeftGuiUp, .last_key = .LeftGuiUp },
                .RightGuiDown => .{ .key = .RightGuiDown, .last_key = .RightGuiDown },
                .RightGuiUp => .{ .key = .RightGuiUp, .last_key = .RightGuiUp },
                .ApplicationsDown => .{ .key = .ApplicationsDown, .last_key = .ApplicationsDown },
                .ApplicationsUp => .{ .key = .ApplicationsUp, .last_key = .ApplicationsUp },
                else => .{ .key = .Unknown, .last_key = .Unknown },
            };
        },

        .SpecialExtendedKey => {
            if (@as(KeyCodeRaw, @enumFromInt(getCharRaw())) == .LeftCtrlDown)
                if (@as(KeyCodeRaw, @enumFromInt(getCharRaw())) == .NumLockDown)
                    if (@as(KeyCodeRaw, @enumFromInt(getCharRaw())) == .SpecialExtendedKey)
                        if (@as(KeyCodeRaw, @enumFromInt(getCharRaw())) == .LeftCtrlUp)
                            if (@as(KeyCodeRaw, @enumFromInt(getCharRaw())) == .NumLockUp)
                                return .{ .key = .PauseBreakDown, .last_key = .NumLockUp };
            return .{ .key = .Unknown, .last_key = .Unknown };
        },
        //else => .{ .key = .Unknown, .last_key = .Unknown },
        //these are there but should never be used by them self but are needed for not allowing duplication
        .LeftGuiDown => .{ .key = .LeftGuiDown, .last_key = .LeftGuiDown },
        .LeftGuiUp => .{ .key = .LeftGuiUp, .last_key = .LeftGuiUp },
        .RightGuiDown => .{ .key = .RightGuiDown, .last_key = .RightGuiDown },
        .RightGuiUp => .{ .key = .RightGuiUp, .last_key = .RightGuiUp },
        .ApplicationsDown => .{ .key = .ApplicationsDown, .last_key = .ApplicationsDown },
        .ApplicationsUp => .{ .key = .ApplicationsUp, .last_key = .ApplicationsUp },
    };
}
const KeyState = struct {
    down: Key,
    up: Key,
    state: bool = false,
};
var states = initState();

inline fn initState() [fields(Key).len / 2 - 1]KeyState {
    comptime {
        const k_v_p = fields(Key);
        var ret: [k_v_p.len / 2 - 1]KeyState = undefined;
        for (k_v_p[0 .. k_v_p.len - 2], 0..) |key, i| {
            if (key.value % 2 == 0) {
                ret[i / 2] = KeyState{ .down = @enumFromInt(key.value), .up = undefined };
            } else {
                ret[i / 2].up = @enumFromInt(key.value);
            }
        }
        return ret;
    }
}

pub fn getKeyUsingState() ?KeyLastKey {
    const key = getKey();

    const key_int = @intFromEnum(key.key);

    if (key_int > 103 * 2) return key;

    if (key_int % 2 == 0) {
        if (states[key_int / 2].state) return null;
        states[key_int / 2].state = true;
    } else {
        if (!states[key_int / 2].state) return null;
        states[key_int / 2].state = false;
    }

    return key;
}

test "test test" {
    const std = @import("std");

    // const val = struct {
    //     key: [:0]const u8,
    //     i: usize,
    // };

    // const value = comptime brk: {
    //     const k_v_p = std.meta.fields(Key);
    //     var ret: [k_v_p.len]val = undefined;
    //     for (k_v_p, 0..) |key, i| {
    //         ret[i] = val{ .key = key.name, .i = key.value };
    //     }
    //     break :brk ret;
    // };
    // for (0..208) |i| {
    //     std.log.warn("{d}: {s}\n", .{ value[i].i, value[i].key }); // [value[i].key.len - 4 ..]
    // }
    for (states) |state| {
        std.log.warn("{} - {}: {}\n", .{ state.down, state.up, state.state });
    }
}

pub const KeyCodeRaw = enum(u8) {
    EscDown = 0x01,
    EscUp = 0x81,
    Key1Down = 0x02,
    Key1Up = 0x82,
    Key2Down = 0x03,
    Key2Up = 0x83,
    Key3Down = 0x04,
    Key3Up = 0x84,
    Key4Down = 0x05,
    Key4Up = 0x85,
    Key5Down = 0x06,
    Key5Up = 0x86,
    Key6Down = 0x07,
    Key6Up = 0x87,
    Key7Down = 0x08,
    Key7Up = 0x88,
    Key8Down = 0x09,
    Key8Up = 0x89,
    Key9Down = 0x0A,
    Key9Up = 0x8A,
    Key0Down = 0x0B,
    Key0Up = 0x8B,
    MinusDown = 0x0C,
    MinusUp = 0x8C,
    EqualDown = 0x0D,
    EqualUp = 0x8D,
    BackspaceDown = 0x0E,
    BackspaceUp = 0x8E,
    TabDown = 0x0F,
    TabUp = 0x8F,
    QDown = 0x10,
    QUp = 0x90,
    WDown = 0x11,
    WUp = 0x91,
    EDown = 0x12,
    EUp = 0x92,
    RDown = 0x13,
    RUp = 0x93,
    TDown = 0x14,
    TUp = 0x94,
    YDown = 0x15,
    YUp = 0x95,
    UDown = 0x16,
    UUp = 0x96,
    IDown = 0x17,
    IUp = 0x97,
    ODown = 0x18,
    OUp = 0x98,
    PDown = 0x19,
    PUp = 0x99,
    OpenBracketDown = 0x1A,
    OpenBracketUp = 0x9A,
    CloseBracketDown = 0x1B,
    CloseBracketUp = 0x9B,
    EnterDown = 0x1C,
    EnterUp = 0x9C,
    LeftCtrlDown = 0x1D,
    LeftCtrlUp = 0x9D,
    ADown = 0x1E,
    AUp = 0x9E,
    SDown = 0x1F,
    SUp = 0x9F,
    DDown = 0x20,
    DUp = 0xA0,
    FDown = 0x21,
    FUp = 0xA1,
    GDown = 0x22,
    GUp = 0xA2,
    HDown = 0x23,
    HUp = 0xA3,
    JDown = 0x24,
    JUp = 0xA4,
    KDown = 0x25,
    KUp = 0xA5,
    LDown = 0x26,
    LUp = 0xA6,
    SemicolonDown = 0x27,
    SemicolonUp = 0xA7,
    ApostropheDown = 0x28,
    ApostropheUp = 0xA8,
    BacktickDown = 0x29,
    BacktickUp = 0xA9,
    LeftShiftDown = 0x2A,
    LeftShiftUp = 0xAA,
    ZDown = 0x2C,
    ZUp = 0xAC,
    XDown = 0x2D,
    XUp = 0xAD,
    CDown = 0x2E,
    CUp = 0xAE,
    VDown = 0x2F,
    VUp = 0xAF,
    BDown = 0x30,
    BUp = 0xB0,
    NDown = 0x31,
    NUp = 0xB1,
    MDown = 0x32,
    MUp = 0xB2,
    CommaDown = 0x33,
    CommaUp = 0xB3,
    DotDown = 0x34,
    DotUp = 0xB4,
    SlashDown = 0x35,
    SlashUp = 0xB5,
    RightShiftDown = 0x36,
    RightShiftUp = 0xB6,
    KeypadMulDown = 0x37,
    KeypadMulUp = 0xB7,
    LeftAltDown = 0x38,
    LeftAltUp = 0xB8,
    SpaceDown = 0x39,
    SpaceUp = 0xB9,
    CapsLockDown = 0x3A,
    CapsLockUp = 0xBA,
    F1Down = 0x3B,
    F1Up = 0xBB,
    F2Down = 0x3C,
    F2Up = 0xBC,
    F3Down = 0x3D,
    F3Up = 0xBD,
    F4Down = 0x3E,
    F4Up = 0xBE,
    F5Down = 0x3F,
    F5Up = 0xBF,
    F6Down = 0x40,
    F6Up = 0xC0,
    F7Down = 0x41,
    F7Up = 0xC1,
    F8Down = 0x42,
    F8Up = 0xC2,
    F9Down = 0x43,
    F9Up = 0xC3,
    F10Down = 0x44,
    F10Up = 0xC4,
    NumLockDown = 0x45,
    NumLockUp = 0xC5,
    ScrollLockDown = 0x46,
    ScrollLockUp = 0xC6,
    KeypadMinusDown = 0x4A,
    KeypadMinusUp = 0xCA,
    Keypad7Down = 0x47,
    Keypad7Up = 0xC7,
    Keypad8Down = 0x48,
    Keypad8Up = 0xC8,
    Keypad9Down = 0x49,
    Keypad9Up = 0xC9,
    Keypad4Down = 0x4B,
    Keypad4Up = 0xCB,
    Keypad5Down = 0x4C,
    Keypad5Up = 0xCC,
    Keypad6Down = 0x4D,
    Keypad6Up = 0xCD,
    KeypadPlusDown = 0x4E,
    KeypadPlusUp = 0xCE,
    Keypad1Down = 0x4F,
    Keypad1Up = 0xCF,
    Keypad2Down = 0x50,
    Keypad2Up = 0xD0,
    Keypad3Down = 0x51,
    Keypad3Up = 0xD1,
    Keypad0Down = 0x52,
    Keypad0Up = 0xD2,
    KeypadDotDown = 0x53,
    KeypadDotUp = 0xD3,
    F11Down = 0x57,
    F11Up = 0xd7,
    F12Down = 0x58,
    F12Up = 0xd8,
    ExtendedKey = 0xE0, //for Extended Keys
    LeftGuiDown = 0x5B,
    LeftGuiUp = 0xDB,
    RightGuiDown = 0x5C,
    RightGuiUp = 0xDC,
    ApplicationsDown = 0x5D,
    ApplicationsUp = 0xDD,
    SpecialExtendedKey = 0xE1, //only for numlock

    //       Extended Keys  Down        Up
    // Numpad Enter	        0xE0 0x1C	0xE0 0x9C
    // Right Ctrl	        0xE0 0x1D	0xE0 0x9D
    // Numpad / (Divide)	0xE0 0x35	0xE0 0xB5
    // Right Alt (AltGr)	0xE0 0x38	0xE0 0xB8
    // Home	                0xE0 0x47	0xE0 0xC7
    // Up Arrow	            0xE0 0x48	0xE0 0xC8
    // Page Up	            0xE0 0x49	0xE0 0xC9
    // Left Arrow	        0xE0 0x4B	0xE0 0xCB
    // Right Arrow	        0xE0 0x4D	0xE0 0xCD
    // End	                0xE0 0x4F	0xE0 0xCF
    // Down Arrow	        0xE0 0x50	0xE0 0xD0
    // Page Down	        0xE0 0x51	0xE0 0xD1
    // Insert	            0xE0 0x52	0xE0 0xD2
    // Delete	            0xE0 0x53	0xE0 0xD3
    // Left GUI (Windows)	0xE0 0x5B	0xE0 0xDB
    // Right GUI (Windows)	0xE0 0x5C	0xE0 0xDC
    // Applications (Menu)	0xE0 0x5D	0xE0 0xDD

    //      Extended Keys 2     Down                            Up
    // Print Screen (SysRq)	    0xE0 0x2A 0xE0 0x37	            0xE0 0xB7 0xE0 0xAA
    // Pause/Break	            0xE1 0x1D 0x45 0xE1 0x9D 0xC5   (no up code)
};

pub const Key = enum(u16) {
    // --------- Base set (single‑byte) ---------
    EscDown,
    EscUp,
    Key1Down,
    Key1Up,
    Key2Down,
    Key2Up,
    Key3Down,
    Key3Up,
    Key4Down,
    Key4Up,
    Key5Down,
    Key5Up,
    Key6Down,
    Key6Up,
    Key7Down,
    Key7Up,
    Key8Down,
    Key8Up,
    Key9Down,
    Key9Up,
    Key0Down,
    Key0Up,
    MinusDown,
    MinusUp,
    EqualDown,
    EqualUp,
    BackspaceDown,
    BackspaceUp,
    TabDown,
    TabUp,
    QDown,
    QUp,
    WDown,
    WUp,
    EDown,
    EUp,
    RDown,
    RUp,
    TDown,
    TUp,
    YDown,
    YUp,
    UDown,
    UUp,
    IDown,
    IUp,
    ODown,
    OUp,
    PDown,
    PUp,
    OpenBracketDown,
    OpenBracketUp,
    CloseBracketDown,
    CloseBracketUp,
    EnterDown,
    EnterUp,
    LeftCtrlDown,
    LeftCtrlUp,
    ADown,
    AUp,
    SDown,
    SUp,
    DDown,
    DUp,
    FDown,
    FUp,
    GDown,
    GUp,
    HDown,
    HUp,
    JDown,
    JUp,
    KDown,
    KUp,
    LDown,
    LUp,
    SemicolonDown,
    SemicolonUp,
    ApostropheDown,
    ApostropheUp,
    BacktickDown,
    BacktickUp,
    LeftShiftDown,
    LeftShiftUp,
    BackslashDown,
    BackslashUp,
    ZDown,
    ZUp,
    XDown,
    XUp,
    CDown,
    CUp,
    VDown,
    VUp,
    BDown,
    BUp,
    NDown,
    NUp,
    MDown,
    MUp,
    CommaDown,
    CommaUp,
    DotDown,
    DotUp,
    SlashDown,
    SlashUp,
    RightShiftDown,
    RightShiftUp,
    KeypadMulDown,
    KeypadMulUp,
    LeftAltDown,
    LeftAltUp,
    SpaceDown,
    SpaceUp,
    CapsLockDown,
    CapsLockUp,
    F1Down,
    F1Up,
    F2Down,
    F2Up,
    F3Down,
    F3Up,
    F4Down,
    F4Up,
    F5Down,
    F5Up,
    F6Down,
    F6Up,
    F7Down,
    F7Up,
    F8Down,
    F8Up,
    F9Down,
    F9Up,
    F10Down,
    F10Up,
    NumLockDown,
    NumLockUp,
    ScrollLockDown,
    ScrollLockUp,
    Keypad7Down,
    Keypad7Up,
    Keypad8Down,
    Keypad8Up,
    Keypad9Down,
    Keypad9Up,
    KeypadMinusDown,
    KeypadMinusUp,
    Keypad4Down,
    Keypad4Up,
    Keypad5Down,
    Keypad5Up,
    Keypad6Down,
    Keypad6Up,
    KeypadPlusDown,
    KeypadPlusUp,
    Keypad1Down,
    Keypad1Up,
    Keypad2Down,
    Keypad2Up,
    Keypad3Down,
    Keypad3Up,
    Keypad0Down,
    Keypad0Up,
    KeypadDotDown,
    KeypadDotUp,
    F11Down,
    F11Up,
    F12Down,
    F12Up,

    // -------- 0×E0‑prefixed (“extended”) keys --------
    NumpadEnterDown,
    NumpadEnterUp,
    RightCtrlDown,
    RightCtrlUp,
    KeypadDivideDown,
    KeypadDivideUp,
    RightAltDown,
    RightAltUp,
    HomeDown,
    HomeUp,
    UpArrowDown,
    UpArrowUp,
    PageUpDown,
    PageUpUp,
    LeftArrowDown,
    LeftArrowUp,
    RightArrowDown,
    RightArrowUp,
    EndDown,
    EndUp,
    DownArrowDown,
    DownArrowUp,
    PageDownDown,
    PageDownUp,
    InsertDown,
    InsertUp,
    DeleteDown,
    DeleteUp,
    LeftGuiDown,
    LeftGuiUp,
    RightGuiDown,
    RightGuiUp,
    ApplicationsDown,
    ApplicationsUp,

    // -------- special multi‑byte keys --------
    PrintScreenDown,
    PrintScreenUp,
    PauseBreakDown, // (no up code)

    // marker for “unmapped / unknown”
    Unknown,
};
